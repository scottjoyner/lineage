services:
  neo4j:
    profiles: ["db"]
    image: neo4j:5.20
    container_name: lineage_neo4j
    environment:
      NEO4J_AUTH: "neo4j/${NEO4J_PASSWORD:-changeme}"
      apoc.export.file.enabled: "true"
      apoc.import.file.enabled: "true"
      apoc.import.file.use_neo4j_config: "true"
    volumes:
      - ./neo4j/data:/data
      - ./neo4j/import:/import
      - ./neo4j/logs:/logs
      - ./neo4j/plugins:/plugins
    ports:
      - "${NEO4J_BOLT_PORT:-7687}:7687"
      - "${NEO4J_HTTP_PORT:-7474}:7474"

  api:
    build: ./api
    container_name: lineage_api
    environment:
      NEO4J_URI: "${NEO4J_URI:-bolt://neo4j:7687}"
      NEO4J_USER: "${NEO4J_USER:-neo4j}"
      NEO4J_PASSWORD: "${NEO4J_PASSWORD:-changeme}"
      API_PORT: "8000"
    ports:
      - "${API_PORT:-8000}:8000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
      - "neo4j:host-gateway"

  web:
    build: ./web
    container_name: lineage_web
    environment:
      WEB_PORT: "${WEB_PORT:-3000}"
      API_BASE: "${API_BASE:-http://localhost:8000}"
    ports:
      - "${WEB_PORT:-3000}:80"
    depends_on: []

  queue:
    build:
      context: .
      dockerfile: queue/api/Dockerfile
    container_name: lineage_queue
    restart: unless-stopped
    environment:
      API_PORT: "${QUEUE_API_PORT:-9000}"
      DB_PATH: "/data/queue.db"
      BACKUP_DIR: "/backups"
      GITHUB_WEBHOOK_SECRET: "${GITHUB_WEBHOOK_SECRET:-}"
    user: "${UID:-1000}:${GID:-1000}"
    volumes:
      - ./queue/data:/data
      - ./queue/backups:/backups
    ports:
      - "${QUEUE_API_PORT:-9000}:9000"
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:9000/healthz', timeout=2)\" || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s

  worker:
    build:
      context: .
      dockerfile: queue/worker/Dockerfile
    container_name: lineage_worker
    restart: unless-stopped
    environment:
      DB_PATH: "/data/queue.db"
      POLL_INTERVAL: "3"
      WORKER_CONCURRENCY: "${WORKER_CONCURRENCY:-2}"
      METRICS_PORT: "9100"
      NEO4J_URI: "${NEO4J_URI:-bolt://neo4j:7687}"
      NEO4J_USER: "${NEO4J_USER:-neo4j}"
      NEO4J_PASS: "${NEO4J_PASS:-${NEO4J_PASSWORD}}"
    user: "${UID:-1000}:${GID:-1000}"
    volumes:
      - ./queue/data:/data
      - ./queue/backups:/backups
      - ./scanner:/scanner:ro
      - ./sample-repo:/scan:ro
    ports:
      - "${WORKER_METRICS_PORT:-9100}:9100"
    extra_hosts:
      - "host.docker.internal:host-gateway"
      - "neo4j:host-gateway"

  ingest:
    build: ./scanner
    container_name: lineage_ingest
    profiles: ["ingest"]
    environment:
      NEO4J_URI: "${NEO4J_URI:-bolt://neo4j:7687}"
      NEO4J_USER: "${NEO4J_USER:-neo4j}"
      NEO4J_PASS: "${NEO4J_PASS:-${NEO4J_PASSWORD}}"
    command: ["ingest", "--path", "/scan", "--conn", "${SCANNER_CONN:-demo_pg}", "--connections", "/connections.yaml"]
    volumes:
      - "${SCAN_PATH:-./sample-repo}:/scan:ro"
      - "./scanner/connections.yaml:/connections.yaml:ro"
    extra_hosts:
      - "host.docker.internal:host-gateway"
      - "neo4j:host-gateway"
